trigger:
  branches:
    include:
    - master
    - releases/*
  paths:
    exclude:
    - docs/*

resources:
  repositories:
  - repository: openvino_contrib
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/openvino_contrib

  - repository: testdata
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/testdata

jobs:
- job: Lin
  strategy:
    matrix:
      # Dynamic:
      #   CMAKE_BUILD_SHARED_LIBS: 'ON'
      #   PYTHON_STATIC_ARGS:
      Static:
        CMAKE_BUILD_SHARED_LIBS: 'OFF'
        PYTHON_STATIC_ARGS: -m "not dynamic_library and not template_plugin"
    maxParallel: 2

  # About 150% of total time
  timeoutInMinutes: 120

  pool:
    name: LIN_VMSS_VENV_F16S_U20_WU2

  variables:
    system.debug: true
    VSTS_HTTP_RETRY: 5
    VSTS_HTTP_TIMEOUT: 200
    BUILD_TYPE: Release
    REPO_DIR: $(Build.Repository.LocalPath)
    OPENVINO_CONTRIB_REPO_DIR: $(REPO_DIR)/../openvino_contrib
    MODELS_PATH: $(REPO_DIR)/../testdata
    WORK_DIR: $(Pipeline.Workspace)/_w
    BUILD_DIR: $(WORK_DIR)/build
    BUILD_SAMPLES_DIR: $(WORK_DIR)/build_samples
    BUILD_LAYER_TESTS_DIR: $(WORK_DIR)/build_layer_tests
    BUILD_SAMPLES_TESTS_DIR: $(WORK_DIR)/build_samples_tests
    INSTALL_DIR: $(WORK_DIR)/install_pkg
    INSTALL_TEST_DIR: $(INSTALL_DIR)/tests
    LAYER_TESTS_DIR: $(INSTALL_TEST_DIR)/layer_tests
    SETUPVARS: $(INSTALL_DIR)/setupvars.sh
    TMP_DIR: /mnt/tmp
    SHARE_DIR: /mount/cinfsshare/onnxtestdata
    CCACHE_DIR: $(SHARE_DIR)/ccache/master/linux

  steps:
  - script: |
      curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2019-06-01"
      whoami
      uname -a
      echo Python3 info ; which python3 ; python3 --version
      echo Python info ; which python ; python --version
      echo Java info ; which java ; java -version
      echo gcc info ; which gcc ; gcc --version
      echo cmake info ; which cmake ; cmake --version
      lsb_release
      env
      cat /proc/cpuinfo
      cat /proc/meminfo
      cat /etc/fstab
      vmstat -s
      df
      lsblk -o NAME,HCTL,SIZE,MOUNTPOINT | grep -i "sd"
      free -h
      echo TargetBranch: $(System.PullRequest.TargetBranch)
      echo SourceBranch: $(Build.SourceBranch)
    displayName: 'System info'

  - script: |
      set -e
      rm -rf $(WORK_DIR) ; mkdir $(WORK_DIR)
      rm -rf $(BUILD_DIR) ; mkdir $(BUILD_DIR)
      rm -rf $(BUILD_SAMPLES_DIR) ; mkdir $(BUILD_SAMPLES_DIR)
      sudo rm -rf $(TMP_DIR) ; sudo mkdir $(TMP_DIR) ; sudo chmod 777 -R $(TMP_DIR)
      sudo mkdir -p $(SHARE_DIR)
      sudo apt --assume-yes update && sudo apt --assume-yes install nfs-common
      sudo mount -vvv -t nfs cinfsshare.file.core.windows.net:/cinfsshare/onnxtestdata $(SHARE_DIR) -o vers=4,minorversion=1,sec=sys
      mkdir -p $(CCACHE_DIR)
    displayName: 'Make dir'

  - checkout: self
    clean: true
    lfs: false
    submodules: recursive
    path: openvino

  - checkout: openvino_contrib
    clean: true
    lfs: false
    submodules: recursive
    path: openvino_contrib

  - script: |
      set -e
      $(REPO_DIR)/install_build_dependencies.sh
      # Move jdk into contrib
      sudo apt --assume-yes install openjdk-11-jdk
      # For opencv-python: python3-setuptools and pip upgrade
      python3 -m pip install --upgrade pip
      python3 -m pip install -r $(REPO_DIR)/src/bindings/python/src/compatibility/openvino/requirements.txt
      python3 -m pip install -r $(REPO_DIR)/src/bindings/python/wheel/requirements-dev.txt
      # For running Python API tests
      python3 -m pip install -r $(REPO_DIR)/src/bindings/python/src/compatibility/openvino/requirements-dev.txt
      # For running Paddle frontend unit tests
      python3 -m pip install -r $(REPO_DIR)/src/core/tests/frontend/paddle/requirements_dev.txt
      # For running ONNX frontend unit tests
      python3 -m pip install -r $(REPO_DIR)/src/core/tests/requirements_test_onnx.txt
      # For MO unit tests
      python3 -m pip install -r $(REPO_DIR)/tools/mo/requirements.txt
      python3 -m pip install -r $(REPO_DIR)/tools/mo/requirements_dev.txt
      # Speed up build
      wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip
      unzip ninja-linux.zip
      sudo cp -v ninja /usr/local/bin/
      # Speed up tests
      git clone https://github.com/google/gtest-parallel.git
    workingDirectory: $(WORK_DIR)
    displayName: 'Install dependencies'

    # Should be after 'Install dependencies' because Git lfs is not installed
  - checkout: testdata
    clean: true
    lfs: true
    path: testdata

  - task: CMake@1
    inputs:
      # CMake must get Python 3.x version by default
      cmakeArgs: >
        -GNinja
        -DVERBOSE_BUILD=ON
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)
        -DENABLE_PYTHON=ON
        -DBUILD_SHARED_LIBS=$(CMAKE_BUILD_SHARED_LIBS)
        -DENABLE_ONEDNN_FOR_GPU=$(CMAKE_BUILD_SHARED_LIBS)
        -DPYTHON_EXECUTABLE=/usr/bin/python3.8
        -DENABLE_WHEEL=ON
        -DENABLE_TESTS=ON
        -DENABLE_OV_ONNX_FRONTEND=ON
        -DENABLE_FASTER_BUILD=ON
        -DENABLE_STRICT_DEPENDENCIES=OFF
        -DENABLE_REQUIREMENTS_INSTALL=OFF
        -DIE_EXTRA_MODULES=$(OPENVINO_CONTRIB_REPO_DIR)/modules
        $(REPO_DIR)
      workingDirectory: $(BUILD_DIR)

  - script: ls -alR $(REPO_DIR)/temp/
    displayName: 'List temp SDKs'

  - script: |
      ninja
    workingDirectory: $(BUILD_DIR)
    displayName: 'Build Lin'

  - script: ls -alR $(REPO_DIR)/bin/
    displayName: 'List bin files'

  - script: rm -fr $(BUILD_DIR)
    displayName: 'Clean build dir'
    continueOnError: false
